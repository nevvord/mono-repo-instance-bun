# Mono Repository Rules and Conventions

## Project Structure

This is a monorepo using Bun as the package manager and runtime with the following structure:

```
mono-repo/
â”œâ”€â”€ .pro/                   # Generated files (ignored by git)
â”‚   â””â”€â”€ prisma/            # Generated Prisma client
â”œâ”€â”€ docs/                  # ðŸ“š Project documentation
â”‚   â”œâ”€â”€ README.md          # Documentation index
â”‚   â”œâ”€â”€ project-overview.md # Main project documentation
â”‚   â”œâ”€â”€ pm2-deployment.md  # PM2 deployment guide
â”‚   â”œâ”€â”€ web-ui-readme.md   # Web UI documentation
â”‚   â”œâ”€â”€ admin-ui-readme.md # Admin UI documentation
â”‚   â”œâ”€â”€ core-readme.md     # Core package documentation
â”‚   â””â”€â”€ config-readme.md   # Configuration documentation
â”œâ”€â”€ packages/              # All applications and packages
â”‚   â”œâ”€â”€ core/              # Shared types, config, and utilities
â”‚   â”œâ”€â”€ backend/           # API server with Hono
â”‚   â”œâ”€â”€ web-ui/            # React 18 web interface with Radix UI
â”‚   â””â”€â”€ admin-ui/          # React 18 admin panel with Radix UI
â”œâ”€â”€ prisma/                # Database configuration
â”‚   â””â”€â”€ schema.prisma      # Data base schema
â”œâ”€â”€ config/               # Configuration files
â”‚   â”œâ”€â”€ index.ts          # Re-exports only (entry point)
â”‚   â”œâ”€â”€ validate-config.ts # Config validation function
â”‚   â””â”€â”€ types/config.ts   # Type definitions
â”œâ”€â”€ .env.example          # Environment variables example
â”œâ”€â”€ ecosystem.config.cjs  # PM2 process manager configuration
â””â”€â”€ package.json          # Root package configuration
```

## Technology Stack

- **Runtime**: Bun (JavaScript runtime and package manager)
- **Database**: PostgreSQL with Prisma ORM
- **Language**: TypeScript
- **Architecture**: Monorepo structure with Bun workspaces
- **Backend**: Hono (fast web framework)
- **Frontend**: React 18 with Radix UI components
- **Styling**: Tailwind CSS with CSS variables
- **Icons**: Lucide React
- **Process Management**: PM2
- **Package Manager**: Bun workspaces

## Database Models

### User Model (`prisma/schema/user.prisma`)

- Authentication system with email/username login
- Fields: id, email, username, password, firstName, lastName, avatar
- Status fields: isActive, isVerified
- Role system: USER, ADMIN, MODERATOR
- Timestamps: createdAt, updatedAt

### Session Model (`prisma/schema/session.prisma`)

- User authentication sessions
- Fields: id, userId, token, expiresAt, userAgent, ipAddress
- Status: isActive
- Cascade delete with user

### Enums (`prisma/schema/enums.prisma`)

- UserRole: USER, ADMIN, MODERATOR

## Prisma Multi-File Schema

- Uses native Prisma multi-file support (prismaSchemaFolder)
- Schema files located in `prisma/schema/` directory
- Base configuration in `base.prisma`
- Models can reference each other across files
- Generated client output: `.pro/prisma/`

## Commands and Workflows

### Database Commands

```bash
# Validate schema
bunx prisma validate --schema=prisma/schema

# Generate Prisma client
bunx prisma generate --schema=prisma/schema

# Run migrations
bunx prisma migrate dev --schema=prisma/schema --name <migration-name>

# Open Prisma Studio
bunx prisma studio --schema=prisma/schema
```

### Development Commands

```bash
# Install dependencies
bun install

# Backend
bun run backend:dev      # Start backend development server
bun run backend:start    # Start backend production server
bun run backend:stop     # Stop backend server
bun run backend:restart  # Restart backend server
bun run backend:logs     # View backend logs
bun run backend:status   # Check backend status

# Web UI
bun run web-ui:dev       # Start web UI development server
bun run web-ui:build     # Build web UI for production
bun run web-ui:test      # Run web UI tests

# Admin UI
bun run admin-ui:dev     # Start admin UI development server
bun run admin-ui:build   # Build admin UI for production
bun run admin-ui:test    # Run admin UI tests

# All Services
bun run dev:all          # Start all services in development
bun run start:all        # Start all services in production
bun run stop:all         # Stop all services
bun run restart:all      # Restart all services
bun run logs:all         # View all logs
bun run status:all       # Check status of all services

# Code Quality
bun run lint             # Run ESLint on all files
bun run lint:fix         # Fix ESLint issues automatically
bun run format           # Format code with Prettier
bun run format:check     # Check code formatting
bun run type-check       # Run TypeScript type checking
bun run check            # Run all checks (type-check + lint + format:check)
bun run check:fix        # Fix all issues (lint:fix + format)

# Git Hooks (Husky)
bun run prepare          # Initialize Husky
bun run pre-commit       # Run pre-commit checks manually
bun run pre-push         # Run pre-push checks manually
```

## File Naming Conventions

- **All files and directories**: kebab-case only (e.g., `validate-config.ts`, `user-service/`)
- **Prisma models**: lowercase with descriptive names (e.g., `user.prisma`, `session.prisma`)
- **Generated files**: All in `.pro/` directory

## Git Conventions

- **Commits**: English only
- **Generated files**: Ignored via `.pro/` in .gitignore
- **Environment files**: Use `.env.example` as template

## Code Style

- **Comments in code**: English only
- **Chat/communication**: Russian
- **TypeScript**: Strict mode enabled
- **Import paths**: Use relative paths to `.pro/prisma` for Prisma client

## File Organization Rules

- **Index files**: Use only for re-exports, no business logic
- **File naming**: Names must describe what happens inside the file (e.g., `validate-config.ts`, `hash-password.ts`)
- **Naming convention**: All files and directories use kebab-case only
- **No OOP**: Avoid classes, use functional programming approach
- **One function per file**: Each file should contain only one main function
- **Types separation**: All types must be in separate `types/` directories next to the code
- **Multiple functions**: If more than one function needed, create `helpers/` directory nearby
- **Function exports**: Use named exports, avoid default exports for functions

### File Organization Examples

```
feature/
â”œâ”€â”€ index.ts              # Re-exports only
â”œâ”€â”€ process-data.ts       # Single function: processData()
â”œâ”€â”€ validate-input.ts     # Single function: validateInput()
â”œâ”€â”€ types/
â”‚   â”œâ”€â”€ process-result.ts # Type definitions
â”‚   â””â”€â”€ validation-rule.ts # Type definitions
â””â”€â”€ helpers/              # If multiple helper functions needed
    â”œâ”€â”€ format-output.ts  # Single helper function
    â””â”€â”€ sanitize-input.ts # Single helper function
```

## Environment Setup

1. Copy `.env.example` to `.env`
2. Configure DATABASE_URL for PostgreSQL
3. Set JWT_SECRET for session tokens
4. Set NODE_ENV and PORT if needed
5. Run `bunx prisma generate --schema=prisma/schema`
6. Run migrations: `bunx prisma migrate dev --schema=prisma/schema`

## Configuration System

- **Typed configuration**: Use `import { config } from './config'`
- **Environment validation**: Required variables validated at startup
- **Type safety**: All config values are properly typed
- **Error handling**: Clear messages for missing/invalid config

## Adding New Models

1. Create new `.prisma` file in `prisma/schema/`
2. Define model with proper relations
3. Run `bunx prisma generate --schema=prisma/schema`
4. Create and run migration if needed

## Adding New Packages

1. Create directory in `packages/`
2. Initialize with `bun init`
3. Add shared dependencies to root `package.json`
4. Import Prisma client from `../.pro/prisma`
5. Update workspace configuration in root `package.json`
6. Add PM2 configuration to `ecosystem.config.cjs` if needed
7. Update scripts in root `package.json`

## Package Structure

### Core Package (`packages/core/`)

- Shared types and interfaces
- Configuration validation
- Utility functions
- Common constants

### Backend Package (`packages/backend/`)

- Hono web framework
- API routes and handlers
- Database operations
- Authentication logic

### Web UI Package (`packages/web-ui/`)

- React 18 application
- Radix UI components
- Tailwind CSS styling
- User-facing interface

### Admin UI Package (`packages/admin-ui/`)

- React 18 admin panel
- Radix UI components
- Tailwind CSS styling
- Administrative interface

## Service Ports and URLs

- **Backend API**: http://localhost:3000
- **Web UI**: http://localhost:3001
- **Admin UI**: http://localhost:3002

## Process Management

- **PM2**: Used for managing all services
- **Development**: Hot reload with file watching
- **Production**: Process management with auto-restart
- **Logs**: Centralized logging for all services
- **Monitoring**: Process status and resource usage

## UI Components and Styling

### Radix UI Components

- **Button**: Multiple variants (default, outline, ghost, destructive)
- **Card**: Header, content, footer sections
- **Badge**: Status indicators and labels
- **Tabs**: Tabbed navigation and content
- **Dialog**: Modal dialogs and overlays
- **Dropdown**: Dropdown menus and selectors
- **Form**: Form controls and validation
- **Navigation**: Navigation menus and breadcrumbs

### Tailwind CSS

- **Utility-first**: Rapid styling with utility classes
- **CSS Variables**: Theme customization with CSS custom properties
- **Dark Mode**: Built-in dark mode support
- **Responsive**: Mobile-first responsive design
- **Animations**: Smooth transitions and animations

### Icons

- **Lucide React**: Consistent icon library
- **Usage**: Import icons as React components
- **Styling**: Customizable size and color

## Development and Testing

### Development Workflow

1. **Setup**: Copy `.env.example` to `.env` and configure
2. **Install**: Run `bun install` to install all dependencies
3. **Database**: Run Prisma migrations and generate client
4. **Start**: Use PM2 commands to start services
5. **Develop**: Make changes with hot reload enabled

### Testing

- **Unit Tests**: Bun test with JSDOM for React components
- **Testing Library**: @testing-library/react for component testing
- **Jest DOM**: @testing-library/jest-dom for DOM matchers
- **Backend Tests**: Bun test for API and configuration testing
- **Type Checking**: TypeScript strict mode enabled
- **Linting**: ESLint for code quality
- **Formatting**: Prettier for consistent code style

### Test Configuration

- **JSDOM Setup**: Global DOM environment for React testing
- **Mock Functions**: getComputedStyle, requestAnimationFrame, etc.
- **Test Commands**: `bun test`, `bun test --watch`, `bun test --coverage`
- **Test Files**: `*.test.ts`, `*.test.tsx` patterns
- **Setup Files**: `test-setup.ts` for global configuration

### Code Quality

- **TypeScript**: Strict mode with proper typing
- **ESLint**: Latest version (v9) with TypeScript support
- **Prettier**: Code formatting with consistent rules
- **Configuration**: Root-level configs for all packages
- **Commands**: Centralized quality checks from root

### ESLint Configuration

- **Version**: ESLint 9 (latest)
- **TypeScript**: Full TypeScript support
- **React**: React-specific rules for UI packages
- **Prettier**: Integration with Prettier
- **Rules**: Strict but practical rules
- **Ignores**: Config files and generated code

### Prettier Configuration

- **Single quotes**: Enabled
- **Semicolons**: Enabled
- **Trailing commas**: ES5
- **Print width**: 80 characters
- **Tab width**: 2 spaces
- **JSX quotes**: Single quotes

## Authentication System

- Password hashing with bcryptjs
- Session-based authentication with tokens
- Role-based access control
- User verification system

## Best Practices

- Keep models in separate files by domain
- Use clear, descriptive names for schema files
- Maintain single source of truth in `base.prisma` for config
- Always specify `--schema=prisma/schema` for Prisma commands
- Use `.pro/` for all generated files to keep workspace clean
- Use Bun workspaces for package management
- Use PM2 for process management in development and production
- Follow kebab-case naming convention for all files and directories
- Use TypeScript strict mode for all packages
- Use Radix UI components for consistent design
- Use Tailwind CSS for styling with CSS variables
- Use Lucide React for icons
- Keep one function per file (functional programming approach)
- Separate types in `types/` directories
- Use named exports, avoid default exports for functions
- **Document all API endpoints in Bruno**: Every new API endpoint must be documented in `bruno/collections/api/` with proper request/response examples and error handling
