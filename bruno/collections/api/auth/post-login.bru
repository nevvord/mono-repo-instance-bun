meta {
  name: Login User
  type: http
  seq: 2
}

post {
  url: {{base_url}}/v1/auth/login
  body: json
  auth: none
}

headers {
  Accept: application/json
  Content-Type: application/json
}

body:json {
  {
    "email": "user@example.com",
    "password": "password123"
  }
}

docs {
  # User Login Endpoint
  
  This endpoint allows users to authenticate and receive a session token.
  
  ## Request Body
  
  - `email` (string, required): User's email address or username
  - `password` (string, required): User's password
  
  ## Authentication Process
  
  1. Validates email and password are provided
  2. Finds user by email or username
  3. Checks if user account is active
  4. Verifies password using bcrypt
  5. Creates a new session with 24-hour expiration
  6. Returns user data and session token
  
  ## Response
  
  ### Success (200 OK)
  
  ```json
  {
    "success": true,
    "message": "Login successful",
    "user": {
      "id": "user-id",
      "email": "user@example.com",
      "username": "user@example.com",
      "isActive": true,
      "isVerified": false,
      "role": "USER",
      "createdAt": "2024-01-15T10:30:00.000Z"
    },
    "session": {
      "token": "session-token-hex-string",
      "expiresAt": "2024-01-16T10:30:00.000Z"
    }
  }
  ```
  
  ### Error (400 Bad Request)
  
  ```json
  {
    "success": false,
    "error": "Email and password are required"
  }
  ```
  
  ### Error (401 Unauthorized)
  
  ```json
  {
    "success": false,
    "error": "Invalid email or password"
  }
  ```
  
  ```json
  {
    "success": false,
    "error": "Account is deactivated"
  }
  ```
  
  ### Error (500 Internal Server Error)
  
  ```json
  {
    "success": false,
    "error": "Internal server error"
  }
  ```
  
  ## Session Token Usage
  
  The returned session token should be included in subsequent API requests as:
  
  - Header: `Authorization: Bearer <token>`
  - Or as a cookie (if implemented)
  
  ## Security Notes
  
  - Passwords are hashed using bcrypt with 12 salt rounds
  - Session tokens are cryptographically secure random strings
  - Sessions expire after 24 hours
  - User agent and IP address are logged for security
}
